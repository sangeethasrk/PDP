PDP Test Report for SET10


Test Name: schedule-tests
Definitions:
	(define Tues135pm '1:35pmTues)
	(define Tues325pm '3:25pmTues)
	(define CW-Tues135 (make-codewalk Tues135pm empty 1))
	(define CW-Tues325 (make-codewalk Tues325pm empty 1))
	(define TUES-CWS (list CW-Tues135 CW-Tues325))
	(define TUES-CWS-REV (list CW-Tues325 CW-Tues135))
	(define NO-TUE135 (make-student 'stchang (list Tues135pm)))
	(define NO-TUE135-kovit (make-student 'kovit (list Tues135pm)))
	(define NO-TUE325 (make-student 'dan (list Tues325pm)))
	(define NO-CONSTRAINT (make-student 'rahul empty))
	(define YES-TUE135 (make-student 'stchang (list Tues135pm)))
	(define YES-TUE135-kovit (make-student 'kovit (list Tues135pm)))
	(define YES-TUE325 (make-student 'dan (list Tues325pm)))
	(define NO-CONSTRAINT2 (make-student 'rahul (list Tues135pm Tues325pm)))
	(define UNAVAIL-TIMES (map (λ (u) (make-student (first u) (rest u))) UNAVAIL))
	(define AVAIL-TIMES (map (λ (u) (make-student (first u) (rest u))) PREFS))
	(define SCHEDULE
	  (list
	   (make-codewalk
	    'Tuesday13:35:00
	    (list
	     'ankurs-ravirajw
	     'kumarch-vjain14
	     'stiteler-prachibh
	     'shail174-sghosh
	     'rama2312-harshilk
	     'ctj)
	    6)
	   (make-codewalk
	    'Tuesday15:25:00
	    (list
	     'lkxccis-shi9114
	     'ngupta27-vinnair
	     'piyushm-vyadav
	     'anpspk-hanxuan
	     'lp17-rohan2j
	     'kairavi-rahul1)
	    6)
	   (make-codewalk
	    'Tuesday18:00:00
	    (list
	     'hshah883-Sampath
	     'NSruthi-hardik15
	     'an1tha-shahv12
	     'vijay86-ashish9
	     'sidd1992-kz4
	     'joyeshk-sun1405)
	    6)
	   (make-codewalk
	    'Wednesday11:45:00
	    (list
	     'roop-kaakash
	     'mahanth-kadama
	     'igot123-kumar01
	     'geethsrk-sivaram
	     'himanshi-ravig
	     'msabhi-rahuls)
	    6)
	   (make-codewalk
	    'Wednesday13:35:00
	    (list
	     'dishant8-vigneshs
	     'ira025-vchinu
	     'abhi2488-vaish24
	     'amardeep-manu11
	     'anupma96-akhil0
	     'yixing-srujan)
	    6)
	   (make-codewalk
	    'Wednesday15:25:00
	    (list
	     'jbabu-mishraMe
	     'sudjoshi-nitins51
	     'shivac-dangiank
	     'allurir0-nhrshm10)
	    6)))
	(define ALL-CWS (map (λ (cw) (make-codewalk cw empty 6)) ALL-CODEWALK-TIMES))

Test Case: 
  (test-true
   "empty students and schedule"
   (and (empty? (schedule/unavail empty empty))
        (empty? (schedule/avail empty empty))))
Test Result: Success

Test Case: 
  (test-true
   "no students"
   (and (equal? (schedule/unavail empty TUES-CWS) TUES-CWS)
        (equal? (schedule/avail empty TUES-CWS) TUES-CWS)))
Test Result: Success

Test Case: 
  (test-true
   "cw slots"
   (and (false? (schedule/unavail (list NO-TUE135) empty))
        (false? (schedule/avail (list NO-TUE135) empty))))
Test Result: Error
first: expected argument of type <non-empty list>; given: '()

Test Case: 
  (test-true
   "put in either slot"
   (let ((sched (schedule/unavail (list NO-CONSTRAINT) TUES-CWS))
         (sched2 (schedule/avail (list NO-CONSTRAINT2) TUES-CWS)))
     (and (or (set=?
               sched
               (list CW-Tues135 (make-codewalk Tues325pm '(rahul) 1)))
              (set=?
               sched
               (list (make-codewalk Tues135pm '(rahul) 1) CW-Tues325)))
          (or (set=?
               sched2
               (list CW-Tues135 (make-codewalk Tues325pm '(rahul) 1)))
              (set=?
               sched2
               (list (make-codewalk Tues135pm '(rahul) 1) CW-Tues325))))))
Test Result: Success

Test Case: 
  (test-true
   "no schedule possible (maybe) backtrack test 1"
   (and (false? (schedule/unavail (list NO-TUE135 NO-TUE135-kovit) TUES-CWS))
        (false? (schedule/avail (list YES-TUE135 YES-TUE135-kovit) TUES-CWS))))
Test Result: Success

Test Case: 
  (test-true
   "no schedule possible (maybe) backtrack test 2"
   (and (false? (schedule/unavail (list NO-TUE135 NO-TUE135-kovit) TUES-CWS-REV))
        (false?
         (schedule/avail (list YES-TUE135 YES-TUE135-kovit) TUES-CWS-REV))))
Test Result: Success

Test Case: 
  (test-true
   "no schedule possible"
   (and (false? (schedule/unavail (list NO-TUE135) (list CW-Tues135)))
        (false? (schedule/avail (list YES-TUE135) (list CW-Tues325)))))
Test Result: Error
first: expected argument of type <non-empty list>; given: '()

Test Case: 
  (test-check
   "Tues135 unavail, put in Tues325pm"
   set=?
   (schedule/unavail (list NO-TUE135) TUES-CWS)
   (list CW-Tues135 (make-codewalk Tues325pm '(stchang) 1)))
Test Result: Success

Test Case: 
  (test-check
   "Tues325 unavail, put in Tues135"
   set=?
   (schedule/unavail (list NO-TUE325) TUES-CWS)
   (list (make-codewalk Tues135pm '(dan) 1) CW-Tues325))
Test Result: Success

Test Case: 
  (test-check
   "unavail: (maybe) backtrack test 1"
   set=?
   (schedule/unavail (list NO-CONSTRAINT NO-TUE325) TUES-CWS)
   (list
    (make-codewalk Tues135pm '(dan) 1)
    (make-codewalk Tues325pm '(rahul) 1)))
Test Result: Success

Test Case: 
  (test-check
   "unavail: (maybe) backtrack test 2"
   set=?
   (schedule/unavail (list NO-CONSTRAINT NO-TUE135) TUES-CWS)
   (list
    (make-codewalk Tues135pm '(rahul) 1)
    (make-codewalk Tues325pm '(stchang) 1)))
Test Result: Success

Test Case: 
  (test-check
   "unavail: (maybe) backtrack test 3"
   set=?
   (schedule/unavail (list NO-CONSTRAINT NO-TUE325) TUES-CWS-REV)
   (list
    (make-codewalk Tues135pm '(dan) 1)
    (make-codewalk Tues325pm '(rahul) 1)))
Test Result: Success

Test Case: 
  (test-check
   "unavail: (maybe) backtrack test 4"
   set=?
   (schedule/unavail (list NO-CONSTRAINT NO-TUE135) TUES-CWS-REV)
   (list
    (make-codewalk Tues135pm '(rahul) 1)
    (make-codewalk Tues325pm '(stchang) 1)))
Test Result: Success

Test Case: 
  (test-check
   "unavail: (maybe) backtrack test 5"
   set=?
   (schedule/unavail (list NO-TUE325 NO-CONSTRAINT) TUES-CWS-REV)
   (list
    (make-codewalk Tues135pm '(dan) 1)
    (make-codewalk Tues325pm '(rahul) 1)))
Test Result: Success

Test Case: 
  (test-check
   "unavail: (maybe) backtrack test 6"
   set=?
   (schedule/unavail (list NO-TUE135 NO-CONSTRAINT) TUES-CWS-REV)
   (list
    (make-codewalk Tues135pm '(rahul) 1)
    (make-codewalk Tues325pm '(stchang) 1)))
Test Result: Success

Test Case: 
  (test-false
   "unavail: wrong student unscheduled"
   (schedule/unavail-ok?
    (list NO-TUE325)
    (list (make-codewalk Tues325pm '(stchang) 1))))
Test Result: Success

Test Case: 
  (test-false
   "unavail: student unscheduled"
   (schedule/unavail-ok?
    (list NO-TUE325)
    (list (make-codewalk Tues325pm '() 1))))
Test Result: Success

Test Case: 
  (test-false
   "unavail: student unscheduled at wrong time"
   (schedule/unavail-ok?
    (list NO-TUE325)
    (list (make-codewalk Tues325pm '(dan) 1))))
Test Result: Success

Test Case: 
  (test-check
   "unavail: sched ok"
   schedule/unavail-ok?
   (list NO-TUE325)
   (list (make-codewalk Tues135pm '(dan) 1)))
Test Result: Success

Test Case: 
  (test-check
   "unavail: real pref data"
   schedule/unavail-ok?
   UNAVAIL-TIMES
   SCHEDULE)
Test Result: Success

Test Case: 
  (test-check
   "put in Tues135pm"
   set=?
   (schedule/avail (list YES-TUE135) TUES-CWS)
   (list CW-Tues325 (make-codewalk Tues135pm '(stchang) 1)))
Test Result: Success

Test Case: 
  (test-check
   "put in Tues325"
   set=?
   (schedule/avail (list YES-TUE325) TUES-CWS)
   (list CW-Tues135 (make-codewalk Tues325pm '(dan) 1)))
Test Result: Success

Test Case: 
  (test-check
   "avail: (maybe) backtrack test 1"
   set=?
   (schedule/avail (list NO-CONSTRAINT2 YES-TUE325) TUES-CWS)
   (list
    (make-codewalk Tues135pm '(rahul) 1)
    (make-codewalk Tues325pm '(dan) 1)))
Test Result: Success

Test Case: 
  (test-check
   "avail: (maybe) backtrack test 2"
   set=?
   (schedule/avail (list NO-CONSTRAINT2 YES-TUE135) TUES-CWS)
   (list
    (make-codewalk Tues135pm '(stchang) 1)
    (make-codewalk Tues325pm '(rahul) 1)))
Test Result: Success

Test Case: 
  (test-check
   "avail: (maybe) backtrack test 3"
   set=?
   (schedule/avail (list NO-CONSTRAINT2 YES-TUE325) TUES-CWS-REV)
   (list
    (make-codewalk Tues135pm '(rahul) 1)
    (make-codewalk Tues325pm '(dan) 1)))
Test Result: Success

Test Case: 
  (test-check
   "avail: (maybe) backtrack test 4"
   set=?
   (schedule/avail (list NO-CONSTRAINT2 YES-TUE135) TUES-CWS-REV)
   (list
    (make-codewalk Tues135pm '(stchang) 1)
    (make-codewalk Tues325pm '(rahul) 1)))
Test Result: Success

Test Case: 
  (test-check
   "avail: (maybe) backtrack test 5"
   set=?
   (schedule/avail (list YES-TUE325 NO-CONSTRAINT2) TUES-CWS-REV)
   (list
    (make-codewalk Tues135pm '(rahul) 1)
    (make-codewalk Tues325pm '(dan) 1)))
Test Result: Success

Test Case: 
  (test-check
   "avail: (maybe) backtrack test 6"
   set=?
   (schedule/avail (list YES-TUE135 NO-CONSTRAINT2) TUES-CWS-REV)
   (list
    (make-codewalk Tues135pm '(stchang) 1)
    (make-codewalk Tues325pm '(rahul) 1)))
Test Result: Success

Test Case: 
  (test-false
   "avail: wrong student unscheduled"
   (schedule/avail-ok?
    (list YES-TUE325)
    (list (make-codewalk Tues325pm '(stchang) 1))))
Test Result: Success

Test Case: 
  (test-false
   "avail: student unscheduled"
   (schedule/avail-ok? (list YES-TUE325) (list (make-codewalk Tues325pm '() 1))))
Test Result: Success

Test Case: 
  (test-false
   "avail: student unscheduled at wrong time"
   (schedule/avail-ok?
    (list YES-TUE325)
    (list (make-codewalk Tues135pm '(dan) 1))))
Test Result: Success

Test Case: 
  (test-check
   "avail: sched ok"
   schedule/avail-ok?
   (list YES-TUE325)
   (list (make-codewalk Tues325pm '(dan) 1)))
Test Result: Success

Test Case: 
  (test-check "avail: real pref data" schedule/avail-ok? AVAIL-TIMES SCHEDULE)
Test Result: Success

Test Case: 
  (test-equal?
   "first choice"
   (avg-choice
    (list NO-CONSTRAINT2 YES-TUE325)
    (list
     (make-codewalk '1:35pmTues (list 'rahul) 1)
     (make-codewalk '3:25pmTues (list 'dan) 1)))
   1)
Test Result: Success

Test Case: 
  (test-=
   "avg choice 1.5"
   (avg-choice
    (list NO-CONSTRAINT2 YES-TUE135)
    (list
     (make-codewalk '1:35pmTues (list 'stchang) 1)
     (make-codewalk '3:25pmTues (list 'rahul) 1)))
   1.5
   0.001)
Test Result: Success


Results for Suite schedule-tests:
  Test Successes: 33
  Test Failures: 0
  Test Errors: 2

Raw Score: 33/35
Normalized Score: 9/10


Overall Results:
  Test Successes: 33
  Test Failures: 0
  Test Errors: 2

Raw Score: 33/35
Normalized Score: 9/10

