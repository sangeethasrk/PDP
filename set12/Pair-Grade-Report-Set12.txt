Partner1 Name: Sangeetha
Partner1 CCS ID: geethsrk

Partner2 Name: Anitha
Partner2 CCS ID: an1tha


Grade Report

Design Grading:

Correctness:           10/10
OOP vs Functional       4/5
Data Design:            5/5
Function Specification: 4/5
Implementation:         3/5
Style:                  4/5

Deductions:

Design Total:         30/35

Notes:

10/10 correctness, good job!

OOP vs Functional
* "code looks compact and concise" isn't very clear, and this explanation applies
  equally to OOP as we've seen it so far -- you haven't seen mutation yet with this
  assignment

Function Specification
* set-loSI isn't a great name -- the purpose statement, too, doesn't make any sense
  An Expr<%> has no idea what the "loSI parameter" is! That's a class-specific detail
  that's somehow found its way into the interface. This is further illustrated by
  how Number%'s set-loSI implementation doesn't do anything with the params argument
* copare-expr refers to val1/val2 which aren't in its argument list

Implementation
* Your CmpExpNoVar% seems like an overly complex version of what you needed to do
  Effectively, you reimplemented the recursive-nature of equal?, which is all you
  needed to call here! Since compare only takes in ExprNoVar's, you aren't even
  using any OOP-related stuff; an implementation like this is unnecessary complexity
* get-loP could have been simplified a little bit with a map
* I'm not convinced that you need these functions: get-base-for-sub and get-base-for
  div. There's no explanation of why it's needed (e.g. why it's needed instead of
  (first loa)) and the explanation of why it works isn't there, either

Style
* don't use camel-case, getNearestVertex should be replaced with get-nearest-vertex
  Just because you're using OOP in Racket doesn't mean you use a different language's
  conventions; conventions are largely determined by the organization you're in
* putting Interface in the name of StaticInfoInterface<%> is redundant; <%> already
  means "interface"

Codewalk Grading:

Partner1: Sangeetha

Q&A:                       8/10
Presentation:              5/5

Deductions:
Notes: 
Q&A
* You should be able to explain your oo/fp advantages in a clear way rather than
  saying empty things like "extensibility it's easy" -- what about it is easy? As
  far as codewalk's concerned, it's ok if you didn't write down what makes it easy,
  but you should be able to easily say what /should/ have been there.

Partner 1 Codewalk Total  13/15


Partner2: Anitha

Q&A:                       8/10
Presentation:              5/5

Deductions:
Notes:
Q&A
* Like your partner, should be able to easily explain what you meant by the overly
  simplistic "code looks compcat and concise" and "easier to handle common behaviors
  across different data."

Partner 2 Codewalk Total: 13/15



Overall Score for Partner 1: 43/50
Overall Score for Partner 2: 43/50

Other Notes:
